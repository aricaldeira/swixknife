#!/usr/bin/python3

import argparse

parser = argparse.ArgumentParser(description='Shows the sezimal date and time')
parser.add_argument('-a', '--api_key', default=None, nargs='?', help='WeatherAPI key')
parser.add_argument('-c', '--city', default=None, nargs='?', help='City/location')
parser.add_argument('-lt', '--latitude', default=None, nargs='?', help='Latitude')
parser.add_argument('-lg', '--longitude', default=None, nargs='?', help='Longitude')
parser.add_argument('-l', '--locale', default=None, nargs='?', help='Locale')
parser.add_argument('-tz', '--timezone', default=None, nargs='?', help='Time zone')
parser.add_argument('-D', '--decimal', dest='decimal', action=argparse.BooleanOptionalAction, help='Use decimal numbers')
parser.add_argument('-Z', '--dozenal', dest='dozenal', action=argparse.BooleanOptionalAction, help='Use dozenal numbers')
parser.add_argument('-N', '--niftimal', dest='niftimal', action=argparse.BooleanOptionalAction, help='Use niftimal numbers')
parser.add_argument('-DD', '--dedicated-digits', dest='dedicated_digits', action=argparse.BooleanOptionalAction, help='Use dedicated digits')


from swixknife.weather.weather import SezimalWeather
from swixknife.base import default_to_dedicated_digits, default_niftimal_to_dedicated_digits
from zoneinfo import ZoneInfo


if __name__ == '__main__':
    arguments = parser.parse_args()

    locale = arguments.locale

    if arguments.timezone:
        time_zone = ZoneInfo(arguments.timezone)
    else:
        time_zone = None

    location = arguments.city
    api_key = arguments.api_key
    latitude = None
    longitude = None

    try:
        if arguments.latitude:
            latitude = float(arguments.latitude)
    except:
        raise ValueError(f'Invalid value for latitude: {arguments.latitude}')

    try:
        if arguments.longitude:
            longitude = float(arguments.longitude)
    except:
        raise ValueError(f'Invalid value for longitude: {arguments.longitude}')

    sw = SezimalWeather(locale, time_zone)
    sw.get_weatherapi_conditions(
        api_key=api_key,
        location=location,
        latitude=latitude, longitude=longitude,
    )

    if arguments.decimal:
        temperature = f'{round(sw.temperature_sensation.decimal, 0)} °'
    elif arguments.dozenal:
        temperature = f'{sw.temperature_sensation.dozenal} °'
    elif arguments.niftimal:
        temperature = f'{sw.temperature_sensation.niftimal} °'

        if '.' in temperature:
            temperature = temperature.split('.')[0] + ' °'

        if arguments.dedicated_digits:
            temperature = default_niftimal_to_dedicated_digits(temperature)

    else:
        temperature = f'{round(sw.temperature_sensation, 0)} °'

        if arguments.dedicated_digits:
            temperature = default_to_dedicated_digits(temperature)

    print(temperature)
