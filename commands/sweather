#!/usr/bin/python3

import argparse

parser = argparse.ArgumentParser(description='Shows the sezimal date and time')
parser.add_argument('-a', '--api_key', default=None, nargs='?', help='WeatherAPI key')
parser.add_argument('-c', '--city', default=None, nargs='?', help='City/location')
parser.add_argument('-lt', '--latitude', default=None, nargs='?', help='Latitude')
parser.add_argument('-lg', '--longitude', default=None, nargs='?', help='Longitude')
parser.add_argument('-l', '--locale', default=None, nargs='?', help='Locale')
parser.add_argument('-tz', '--timezone', default=None, nargs='?', help='Time zone')
parser.add_argument('-D', '--decimal', dest='decimal', action=argparse.BooleanOptionalAction, help='Use decimal numbers')
parser.add_argument('-Z', '--dozenal', dest='dozenal', action=argparse.BooleanOptionalAction, help='Use dozenal numbers')
parser.add_argument('-N', '--niftimal', dest='niftimal', action=argparse.BooleanOptionalAction, help='Use niftimal numbers')
parser.add_argument('-DD', '--dedicated-digits', dest='dedicated_digits', action=argparse.BooleanOptionalAction, help='Use dedicated digits')
parser.add_argument('-UT', '--unit-tapa', dest='unit_tapa', action=argparse.BooleanOptionalAction, default=True, help='Temperature in tapas °S')
parser.add_argument('-UG', '--unit-gatika', dest='unit_gatika', action=argparse.BooleanOptionalAction, help='Temperature in gatikas EDgat')
parser.add_argument('-UC', '--unit-celsius', dest='unit_celsius', action=argparse.BooleanOptionalAction, help='Temperature in Celsius °C')
parser.add_argument('-UK', '--unit-kelvin', dest='unit_kelvin', action=argparse.BooleanOptionalAction, help='Temperature in kelvins K')
parser.add_argument('-UF', '--unit-fahrenheit', dest='unit_fahrenheit', action=argparse.BooleanOptionalAction, help='Temperature in Fahrenheit °F')
parser.add_argument('-NU', '--no-unit', dest='no_unit', action=argparse.BooleanOptionalAction, help='Don’t show unit, just the temperature value')
parser.add_argument('-LR', '--last-reading', dest='last_reading', action=argparse.BooleanOptionalAction, help='Use last reading (doesn’t check API again)')


from swixknife.weather.weather import SezimalWeather
from swixknife.localization import sezimal_locale
from zoneinfo import ZoneInfo

from swixknife.units import TAPA_TO_CELSIUS, \
    tapa_to_gatika, GATIKA_TO_KELVIN, tapa_to_fahrenheit


if __name__ == '__main__':
    arguments = parser.parse_args()

    locale = sezimal_locale(arguments.locale or None)

    if arguments.timezone:
        time_zone = ZoneInfo(arguments.timezone)
    else:
        time_zone = None

    location = arguments.city
    api_key = arguments.api_key
    latitude = None
    longitude = None

    try:
        if arguments.latitude:
            latitude = float(arguments.latitude)
    except:
        raise ValueError(f'Invalid value for latitude: {arguments.latitude}')

    try:
        if arguments.longitude:
            longitude = float(arguments.longitude)
    except:
        raise ValueError(f'Invalid value for longitude: {arguments.longitude}')

    sw = SezimalWeather(locale, time_zone, arguments.last_reading)
    # sw.get_weatherapi_conditions(
    #     api_key=api_key,
    #     location=location,
    #     latitude=latitude, longitude=longitude,
    # )
    sw.get_openweathermap_conditions(
        api_key=api_key,
        latitude=latitude,
        longitude=longitude,
    )

    temperature = sw.temperature_sensation
    celsius = locale.format_decimal_number(temperature * TAPA_TO_CELSIUS, 1)

    if arguments.unit_celsius:
        temperature *= TAPA_TO_CELSIUS
        unit = '°C'
    elif arguments.unit_fahrenheit:
        temperature = tapa_to_fahrenheit(temperature)
        unit = '°F'
    elif arguments.unit_gatika or arguments.unit_kelvin:
        temperature = tapa_to_gatika(temperature)

        if arguments.unit_kelvin:
            temperature *= GATIKA_TO_KELVIN
            unit = 'K'
        else:
            temperature /= 100_000_000
            unit = 'XDgat'

    else:
        unit = '°S'

    if arguments.decimal:
        temperature = locale.format_decimal_number(temperature, 1)
    elif arguments.dozenal:
        temperature = locale.format_dozenal_number(temperature, 1)
    elif arguments.niftimal:
        temperature = locale.format_niftimal_number(
            round(temperature, 0),
            0,
            dedicated_digits=arguments.dedicated_digits
            )
    else:
        temperature = locale.format_number(
            round(temperature, 0),
            0,
            dedicated_digits=arguments.dedicated_digits
            )

    if arguments.no_unit:
        print(temperature)
    else:
        # print(f'{temperature} {unit} • {celsius} °C')
        print(f'{temperature} {unit}')
