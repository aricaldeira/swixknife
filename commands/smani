#!/usr/bin/env python

import argparse

parser = argparse.ArgumentParser(description='List directory content using sezimal numbers and dates')
parser.add_argument('-l', '--locale', dest='locale', nargs='?', default=None, help='Locale')
parser.add_argument('-dc', '--decimal-currency', dest='decimal_currency', nargs='?', default=None, help='Decimal currency')
parser.add_argument('-D', '--decimal', dest='decimal', action=argparse.BooleanOptionalAction, help='Use decimal numbers')
parser.add_argument('-Z', '--dozenal', dest='dozenal', action=argparse.BooleanOptionalAction, help='Use dozenal numbers')
parser.add_argument('-N', '--niftimal', dest='niftimal', action=argparse.BooleanOptionalAction, help='Use niftimal numbers')
parser.add_argument('-M', '--misali', dest='misali', action=argparse.BooleanOptionalAction, help='Use misali instead of mani')
parser.add_argument('-S', '--satoshi', dest='satoshi', action=argparse.BooleanOptionalAction, help='Use satoshi instead of mani')
parser.add_argument('-B', '--bitcoin', dest='bitcoin', action=argparse.BooleanOptionalAction, help='Use bitcoin instead of mani')
parser.add_argument('-U', '--usd', dest='usd', action=argparse.BooleanOptionalAction, help='Show also USD rate')
parser.add_argument('-DD', '--dedicated-digits', dest='dedicated_digits', action=argparse.BooleanOptionalAction, help='Use dedicated digits')


from swixknife import sezimal_locale
from swixknife.mani import Mani
from swixknife.units.conversions import *
from decimal import Decimal
from swixknife import Sezimal


if __name__ == '__main__':
    arguments = parser.parse_args()

    locale = sezimal_locale(arguments.locale)

    mani = Mani(arguments.decimal_currency)
    mani.update_rates()

    if arguments.misali:
        mani_amount = MISALI_TO_MANI

        if arguments.niftimal and arguments.dedicated_digits:
            mani_formatted = 'M₷ 󱨁'
        elif (not (arguments.decimal or arguments.dozenal)) and arguments.dedicated_digits:
            mani_formatted = 'M₷ 󱨁'
        else:
            mani_formatted = 'M₷ 1'

    elif arguments.bitcoin:
        mani_amount = BITCOIN_TO_MANI

        if arguments.niftimal and arguments.dedicated_digits:
            mani_formatted = '₿ 󱨁'
        elif (not (arguments.decimal or arguments.dozenal)) and arguments.dedicated_digits:
            mani_formatted = '₿ 󱨁'
        else:
            mani_formatted = '₿ 1'

    else:
        if arguments.decimal:
            mani_amount = SATOSHI_TO_MANI * Decimal(10_000)
            mani_formatted = locale.format_decimal_number(Decimal(10_000), decimal_places=0, prefix='₷')

        elif arguments.dozenal:
            mani_amount = SATOSHI_TO_MANI * Decimal(1728)
            mani_formatted = locale.format_dozenal_number(Decimal(1728), dozenal_places=0, prefix='₷')

        elif arguments.niftimal:
            mani_amount = SATOSHI_TO_MANI * 100_0000
            mani_formatted = locale.format_niftimal_number('1000', niftimal_places=0, prefix='₷', dedicated_digits=arguments.dedicated_digits)

        else:
            mani_amount = SATOSHI_TO_MANI * 100_0000
            mani_formatted = locale.format_number(100_0000, sezimal_places=0, prefix='₷', dedicated_digits=arguments.dedicated_digits)

        if arguments.satoshi:
            mani_formatted = mani_formatted.replace('₷', 'ș')

    dc = mani.mani_to_decimal_currency(mani_amount)
    dc_prefix = mani.decimal_symbol

    mani.decimal_currency = 'USD'
    usd = mani.mani_to_decimal_currency(mani_amount)

    if arguments.decimal:
        dc_formatted = locale.format_decimal_number(dc.decimal, prefix=dc_prefix)
        usd_formatted = locale.format_decimal_number(usd.decimal, prefix='US$')

    elif arguments.dozenal:
        dc_formatted = locale.format_dozenal_number(dc.decimal, prefix=dc_prefix)
        usd_formatted = locale.format_dozenal_number(usd.decimal, prefix='US$')

    elif arguments.niftimal:
        dc_formatted = locale.format_niftimal_number(dc.decimal, prefix=dc_prefix)
        usd_formatted = locale.format_niftimal_number(usd.decimal, prefix='US$', dedicated_digits=arguments.dedicated_digits)

    else:
        dc_formatted = locale.format_number(dc, prefix=dc_prefix, dedicated_digits=arguments.dedicated_digits)
        usd_formatted = locale.format_number(usd, prefix='US$', dedicated_digits=arguments.dedicated_digits)

    if arguments.usd:
        print(f'{mani_formatted}: {dc_formatted} / {usd_formatted}')
    else:
        print(f'{mani_formatted}: {dc_formatted}')


