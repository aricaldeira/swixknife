#!/usr/bin/python3

import argparse

parser = argparse.ArgumentParser(description='Shows the sezimal calendar')
parser.add_argument('-d', '--day', dest='day', default='', nargs='?', help='Day')
parser.add_argument('-m', '--month', dest='month', default='', nargs='?', help='Month')
parser.add_argument('-y', '--year', dest='year', default='', nargs='?', help='Year')
parser.add_argument('-l', '--locale', dest='locale', nargs='?', default=None, help='Locale')
parser.add_argument('-Q', '--quarterly', dest='quarterly', action=argparse.BooleanOptionalAction, help='Print quarter')
parser.add_argument('-Y', '--yearly', dest='yearly', action=argparse.BooleanOptionalAction, help='Print year')
parser.add_argument('-D', '--decimal', dest='decimal', action=argparse.BooleanOptionalAction, help='Use decimal numbers')
parser.add_argument('-Z', '--dozenal', dest='dozenal', action=argparse.BooleanOptionalAction, help='Use dozenal numbers')
parser.add_argument('-N', '--niftimal', dest='niftimal', action=argparse.BooleanOptionalAction, help='Use niftimal numbers')
parser.add_argument('-G', '--gregorian', dest='gregorian', action=argparse.BooleanOptionalAction, help='Use Gregorian days')
parser.add_argument('-SH', '--southern-hemisphere', dest='southern', action=argparse.BooleanOptionalAction, help='Use southern hemisphere')
parser.add_argument('-NH', '--northern-hemisphere', dest='northern', action=argparse.BooleanOptionalAction, help='Use northern hemisphere')
parser.add_argument('-i', '--iso', default=None, nargs='?', help='ISO/Gregorian date')
parser.add_argument('-s', '--date', default=None, nargs='?', help='Sezimal date')
parser.add_argument('-tz', '--time-zone', dest='time_zone', default=None, nargs='?', help='Time zone')
parser.add_argument('-SD', '--sezimal-digits', dest='sezimal_digits', action=argparse.BooleanOptionalAction, help='Use sezimal digits')
parser.add_argument('-LFWD', '--locale-first-weekday', dest='locale_first_weekday', action=argparse.BooleanOptionalAction, help='Use locale’s first weekday')
parser.add_argument('-ET', '--exclude-time', dest='exclude_time', action=argparse.BooleanOptionalAction, help='Don’t show time')
parser.add_argument('-EE', '--exclude-events', dest='exclude_events', action=argparse.BooleanOptionalAction, help='Don’t show events')
parser.add_argument('-H', '--html', dest='html', action=argparse.BooleanOptionalAction, help='HTML mode - replaces spaces for &nbsp;')
parser.add_argument('-V', '--visible-spaces', dest='visible_spaces', action=argparse.BooleanOptionalAction, help='HTML mode - replaces spaces for dots')

import os

import swixknife
from swixknife.date_time import SezimalDate as SD, SezimalTime as ST, SezimalDateTime as SDT
from swixknife import sezimal_locale
from swixknife import SezimalInteger, SezimalRange
from swixknife.date_time.sun_moon import list_sun_moon
from swixknife.date_time.sezimal_functions import system_time_zone
import datetime as _datetime
from swixknife.date_time.calendar import SezimalCalendarTerminal


def _calendar_formats(calendar_parameters: dict, arguments, locale) -> dict:
    if arguments.gregorian:
        calendar_parameters['day_format'] = '%-d'
        calendar_parameters['month_format'] = '%B'
        calendar_parameters['year_format'] = '%Y'
        calendar_parameters['month_year_format'] = '%B %Y'
        calendar_parameters['time_format'] = '%H:%M:%S'
        calendar_parameters['date_format'] = locale.ISO_DATE_FORMAT

    elif arguments.decimal:
        if '?' in locale.DATE_FORMAT:
            calendar_parameters['day_format'] = '#9?-d'
            calendar_parameters['month_format'] = '#9M'
            calendar_parameters['year_format'] = '#9?sY'
            calendar_parameters['month_year_format'] = '#9M #9?sY'
            calendar_parameters['time_format'] = '%?H:%?M:%?S'
            calendar_parameters['date_format'] = locale.DATE_FORMAT.replace('#', '#9')
            calendar_parameters['date_format'] = calendar_parameters['date_format'].replace('Y', 'sY')

        else:
            calendar_parameters['day_format'] = '#9-d'
            calendar_parameters['month_format'] = '#M'
            calendar_parameters['year_format'] = '#9sY'
            calendar_parameters['month_year_format'] = '#M #9sY'
            calendar_parameters['time_format'] = '%H:%M:%S'
            calendar_parameters['date_format'] = locale.DATE_FORMAT.replace('#', '#9')
            calendar_parameters['date_format'] = calendar_parameters['date_format'].replace('Y', 'sY')

    elif arguments.dozenal:
        if '?' in locale.DATE_FORMAT:
            calendar_parameters['day_format'] = '#↋?-d'
            calendar_parameters['month_format'] = '#M'
            calendar_parameters['year_format'] = '#↋?Y'
            calendar_parameters['month_year_format'] = '#M #↋?Y'
            calendar_parameters['time_format'] = '#↋↋?u:#↋↋?p:#↋↋?a'
            calendar_parameters['date_format'] = locale.DATE_FORMAT.replace('#', '#↋')

        else:
            calendar_parameters['day_format'] = '#↋-d'
            calendar_parameters['month_format'] = '#M'
            calendar_parameters['year_format'] = '#↋Y'
            calendar_parameters['month_year_format'] = '#M #↋Y'
            calendar_parameters['time_format'] = '#↋↋u:#↋↋p:#↋↋a'
            calendar_parameters['date_format'] = locale.DATE_FORMAT.replace('#', '#↋')

    elif arguments.niftimal:
        if arguments.sezimal_digits:
            calendar_parameters['day_format'] = '#@!-d'
            calendar_parameters['month_format'] = '#M'
            calendar_parameters['year_format'] = '#@!y'
            calendar_parameters['month_year_format'] = '#M #@!y'
            calendar_parameters['time_format'] = '#@!u:#@!p:#@!a'
            calendar_parameters['date_format'] = locale.DATE_FORMAT.replace('#', '#@!')

        else:
            calendar_parameters['day_format'] = '#@-d'
            calendar_parameters['month_format'] = '#M'
            calendar_parameters['year_format'] = '#@y'
            calendar_parameters['month_year_format'] = '#M #@y'
            calendar_parameters['time_format'] = '#@u:#@p:#@a'
            calendar_parameters['date_format'] = locale.DATE_FORMAT.replace('#', '#@')

    else:
        if arguments.sezimal_digits:
            calendar_parameters['day_format'] = '#!-d'
            calendar_parameters['month_format'] = '#M'
            calendar_parameters['year_format'] = '#!Y'
            calendar_parameters['month_year_format'] = '#M #!Y'
            calendar_parameters['time_format'] = '#!u:#!p:#!a'
            calendar_parameters['date_format'] = locale.DATE_FORMAT.replace('#', '#!')

        else:
            calendar_parameters['day_format'] = None
            calendar_parameters['month_format'] = None
            calendar_parameters['year_format'] = None
            calendar_parameters['month_year_format'] = None
            calendar_parameters['time_format'] = None
            calendar_parameters['date_format'] = None


if __name__ == '__main__':
    arguments = parser.parse_args()

    locale = sezimal_locale(arguments.locale)

    time_zone = arguments.time_zone

    if time_zone == 'locale':
        time_zone = locale.DEFAULT_TIME_ZONE

    if not time_zone:
        time_zone = system_time_zone()

    original_tz = system_time_zone()

    os.environ['TZ'] = time_zone

    if arguments.iso:
        dt = _datetime.datetime.fromisoformat(arguments.iso)
        time = SDT(dt)
        date = time.date

        if ':' not in arguments.iso:
            time = SDT.combine(date, ST.now(time_zone), time_zone)

    elif arguments.date:
        time = SDT(arguments.date)
        date = time.date

        if ':' not in arguments.date:
            time = SDT.combine(date, ST.now(time_zone), time_zone)

    else:
        time = SDT.now(time_zone)
        date = time.date

    day = arguments.day or None
    month = arguments.month or None
    year = arguments.year or None

    if day or month or year:
        time = time.replace(day=day, month=month, year=year)

    if (arguments.southern or arguments.northern):
        southern = arguments.southern and (not arguments.northern)
    else:
        southern = locale.DEFAULT_HEMISPHERE == 'S'

    os.environ['TZ'] = original_tz

    calendar_parameters = {
        'locale': locale,
        'hemisphere': 'S' if southern else 'N',
        'first_weekday': 'LOC' if arguments.locale_first_weekday else 'MON',
        'use_rtl': locale.RTL,
    }

    appended_calendar = ''

    if arguments.gregorian:
        _calendar_formats(calendar_parameters, arguments, locale)
        cal = SezimalCalendarTerminal(time, **calendar_parameters)

        if arguments.quarterly:
            appended_calendar = cal.quarter()
        elif arguments.yearly:
            appended_calendar = cal.year()
        else:
            appended_calendar = cal.month(include_time=False, include_events=False, return_template=True)

        arguments.gregorian = False

    _calendar_formats(calendar_parameters, arguments, locale)

    cal = SezimalCalendarTerminal(time, **calendar_parameters)

    if arguments.quarterly:
        calendar = cal.quarter()

        if appended_calendar:
            calendar += '\n' + appended_calendar

    elif arguments.yearly:
        calendar = cal.year()

        if appended_calendar:
            calendar += '\n' + appended_calendar

    else:
        calendar = cal.month(
            appended_text='\n' + appended_calendar,
            include_time=not arguments.exclude_time,
            include_events=not arguments.exclude_events,
        )

    # if 'KONSOLE_VERSION' in os.environ:
    calendar = calendar.replace('\ufe0f', '')

    if arguments.html or arguments.visible_spaces:
        c = ''

        first_line = calendar.splitlines()[0]
        for line in calendar.splitlines():
            c += f'  {line}  \n'

        c += f'  {first_line}  \n'

        if arguments.visible_spaces:
            calendar = c.replace(' ', '.')
        else:
            calendar = c.replace(' ', '&nbsp;')

    print(calendar)
    print()
