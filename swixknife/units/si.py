

from ..sezimal import Sezimal, SezimalInteger, SezimalFraction
from decimal import Decimal


#
# Time and Frequency
#
ANUGA_TO_SECOND = SezimalFraction('41 / 2_130')
SECOND_TO_ANUGA = ANUGA_TO_SECOND.reciprocal

#
# Avrita = agrima⁻¹
#
AVRITA_TO_HERTZ = SezimalFraction('41 / 2_130')
HERTZ_TO_AVRITA = AVRITA_TO_HERTZ.reciprocal


#
# Civil time
#
UTA_TO_HOUR = SezimalFraction('2 / 3')
HOUR_TO_UTA = UTA_TO_HOUR.reciprocal

POSHA_TO_MINUTE = SezimalFraction('14 / 13')
MINUTE_TO_POSHA = POSHA_TO_MINUTE.reciprocal

AGRIMA_TO_SECOND = SezimalFraction('122 / 43')
SECOND_TO_AGRIMA = AGRIMA_TO_SECOND.reciprocal

BODA_TO_SECOND = SezimalFraction('41 / 213_000')
SECOND_TO_BODA = BODA_TO_SECOND.reciprocal

UTA_TO_ANUGA = Sezimal('1_000_000')
POSHA_TO_ANUGA = Sezimal('10_000')
AGRIMA_TO_ANUGA = Sezimal('100')
BODA_TO_ANUGA = Sezimal('0.01')

UTA_TO_AGRIMA = Sezimal('10_000')
POSHA_TO_AGRIMA = Sezimal('100')
ANUGA_TO_AGRIMA = Sezimal('0.01')
BODA_TO_AGRIMA = Sezimal('0.000_1')

UTA_TO_DAY = Sezimal('0.01')
POSHA_TO_DAY = Sezimal('0.000_1')
AGRIMA_TO_DAY = Sezimal('0.000_001')
ANUGA_TO_DAY = Sezimal('0.000_000_01')
BODA_TO_DAY = Sezimal('0.000_000_000_1')

#
# Length, Speed, Acceleration, Area, Volume
#
PADA_TO_METER = SezimalFraction('2_211 / 231_043')
METER_TO_PADA = PADA_TO_METER.reciprocal

DIMAPADA_TO_METER = SezimalFraction('221_100 / 231_043')
METER_TO_DIMAPADA = DIMAPADA_TO_METER.reciprocal


PADA_TO_KILOMETER = SezimalFraction('2_211 / 1_541_513_000')
KILOMETER_TO_PADA = PADA_TO_KILOMETER.reciprocal

PAMAPADA_TO_KILOMETER = SezimalFraction('13_244 / 114_513')
KILOMETER_TO_PAMAPADA = PAMAPADA_TO_KILOMETER.reciprocal


PADA_TO_CENTIMETER = SezimalFraction('1_032_324 / 231_043')
CENTIMETER_TO_PADA = PADA_TO_CENTIMETER.reciprocal


PADA_TO_MILLIMETER = SezimalFraction('14_541_424 / 231_043')
MILLIMETER_TO_PADA = PADA_TO_MILLIMETER.reciprocal

DITIPADA_TO_MILLIMETER = SezimalFraction('2_423_234 / 3_444_043')
MILLIMETER_TO_DITIPADA = DITIPADA_TO_MILLIMETER.reciprocal


#
# Vega = pada × agrima⁻¹
# Vega = pada × avrita
#
VEGA_TO_METER_PER_SECOND = SezimalFraction('4_422 / 13_213')
METER_PER_SECOND_TO_VEGA = VEGA_TO_METER_PER_SECOND.reciprocal

VEGA_TO_KILOMETER_PER_HOUR = SezimalFraction('13_244 / 5_113')
KILOMETER_PER_HOUR_TO_VEGA = VEGA_TO_KILOMETER_PER_HOUR.reciprocal

PADA_PER_AGRIMA_TO_METER_PER_SECOND = VEGA_TO_METER_PER_SECOND
METER_PER_SECOND_TO_PADA_PER_AGRIMA = METER_PER_SECOND_TO_VEGA

PADA_PER_AGRIMA_TO_KILOMETER_PER_HOUR = VEGA_TO_KILOMETER_PER_HOUR
KILOMETER_PER_HOUR_TO_PADA_PER_AGRIMA = KILOMETER_PER_HOUR_TO_VEGA

#
# Tevara = pada × agrima⁻²
#
# 1 m/s² = 3.412 tvr = 3.412 pad/ang²
# 1 tvr = 1 ÷ 3.412 m/s²
#
TEVARA_TO_METER_PER_SQUARE_SECOND = SezimalFraction('44_220 / 2_521')
METER_PER_SQUARE_SECOND_TO_TEVARA = TEVARA_TO_METER_PER_SQUARE_SECOND.reciprocal

# PADA_PER_SQUARE_AGRIMA_TO_METER_PER_SQUARE_SECOND = TEVARA_TO_METER_PER_SQUARE_SECOND
# METER_PER_SQUARE_SECOND_TO_PADA_PER_SQUARE_AGRIMA = METER_PER_SQUARE_SECOND_TO_TEVARA

#
# Keshe = pada²
#
KESHE_TO_SQUARE_METER = SezimalFraction('5_332_521 / 102_235_433_213')
SQUARE_METER_TO_KESHE = KESHE_TO_SQUARE_METER.reciprocal

SQUARE_PADA_TO_SQUARE_METER = KESHE_TO_SQUARE_METER
SQUARE_METER_TO_SQUARE_PADA = SQUARE_METER_TO_KESHE

KESHE_TO_SQUARE_KILOMETER = SezimalFraction('5_332_521 / 3_451_550_303_213_000_000')
SQUARE_KILOMETER_TO_KESHE = KESHE_TO_SQUARE_KILOMETER.reciprocal

#
# Dishumakeshe = DSksh = ESpad² = 1_000_000_000_000 pad²
#
# 1 km² = 0.41 DSksh = 0.41 ESpad²
# 1 DSksh = 1 ESpad² = 1.25 km²
#
DISHUMAKESHE_TO_SQUARE_KILOMETER = SezimalFraction('1_354_105_104 / 1_044_050_213')
SQUARE_KILOMETER_TO_DISHUMAKESHE = DISHUMAKESHE_TO_SQUARE_KILOMETER.reciprocal

SQUARE_PAMAPADA_TO_SQUARE_KILOMETER = SezimalFraction('225_314_144 / 14_101_133_213')
SQUARE_KILOMETER_TO_SQUARE_PAMAPADA = SQUARE_PAMAPADA_TO_SQUARE_KILOMETER.reciprocal

#
# Aytan = pada³
#
AYTAN_TO_CUBIC_METER = SezimalFraction('21_123_532_331 / 24_115_052_350_444_043')
CUBIC_METER_TO_AYTAN = AYTAN_TO_CUBIC_METER.reciprocal

CUBIC_PADA_TO_CUBIC_METER = AYTAN_TO_CUBIC_METER
CUBIC_METER_TO_CUBIC_PADA = CUBIC_METER_TO_AYTAN

AYTAN_TO_LITER = SezimalFraction('141_144_224_351_544 / 24_115_052_350_444_043')
LITER_TO_AYTAN = AYTAN_TO_LITER.reciprocal

CUBIC_PADA_TO_LITER = AYTAN_TO_LITER
LITER_TO_CUBIC_PADA = LITER_TO_AYTAN

#
# Mass and Density
#
DRAVYA_TO_KILOGRAM = SezimalFraction('1_305_440_313_522_545_551 / 223_224_324_353_132_012_312')
KILOGRAM_TO_DRAVYA = DRAVYA_TO_KILOGRAM.reciprocal

DRAVYA_TO_GRAM = SezimalFraction('235_231_134_040_525_431_322 / 5_244_011_442_455_000_311')
GRAM_TO_DRAVYA = DRAVYA_TO_GRAM.reciprocal

DRAVYA_TO_MILLIGRAM = SezimalFraction('2_013_434_313_015_203_313_124_452 / 5_244_011_442_455_000_311')
MILLIGRAM_TO_DRAVYA = DRAVYA_TO_MILLIGRAM.reciprocal

#
# Gana = dravya ÷ aytan = dravya ÷ pada³
#
# This is equal to the density of Water at
# 293.150_547_161_145 K
# 20.000_547_161_145 °C
#
GANA_TO_KILOGRAM_PER_CUBIC_METER = SezimalFraction('1_530_352_241_044_350_011 / 225_420_400_413_012')
KILOGRAM_PER_CUBIC_METER_TO_GANA = GANA_TO_KILOGRAM_PER_CUBIC_METER.reciprocal

DRAVYA_PER_AYTAN_TO_KILOGRAM_PER_CUBIC_METER = GANA_TO_KILOGRAM_PER_CUBIC_METER
KILOGRAM_PER_CUBIC_METER_PER_DRAVYA_PER_AYTAN = KILOGRAM_PER_CUBIC_METER_TO_GANA

DRAVYA_PER_CUBIC_PADA_TO_KILOGRAM_PER_CUBIC_METER = GANA_TO_KILOGRAM_PER_CUBIC_METER
KILOGRAM_PER_CUBIC_METER_TO_DRAVYA_PER_CUBIC_PADA = KILOGRAM_PER_CUBIC_METER_TO_GANA

# GANA_TO_KILOGRAM_PER_LITER = Sezimal('0.000_143_250_332_200_401_243_000_414_422_212_442_541_413_443_332')
# KILOGRAM_PER_LITER_TO_GANA = Sezimal('3_223.010_240_451_224')
# GANA_TO_KILOGRAM_PER_LITER.reciprocal = KILOGRAM_PER_LITER_TO_GANA
# KILOGRAM_PER_LITER_TO_GANA.reciprocal = GANA_TO_KILOGRAM_PER_LITER
#
# DRAVYA_PER_AYTAN_TO_KILOGRAM_PER_LITER = GANA_TO_KILOGRAM_PER_LITER
# KILOGRAM_PER_LITER_PER_DRAVYA_PER_AYTAN = KILOGRAM_PER_LITER_TO_GANA
#
# DRAVYA_PER_CUBIC_PADA_TO_KILOGRAM_PER_LITER = GANA_TO_KILOGRAM_PER_LITER
# KILOGRAM_PER_LITER_TO_DRAVYA_PER_CUBIC_PADA = KILOGRAM_PER_LITER_TO_GANA
#
# GANA_TO_GRAM_PER_CUBIC_CENTIMETER = GANA_TO_KILOGRAM_PER_LITER
# GRAM_PER_CUBIC_CENTIMETER_TO_GANA = KILOGRAM_PER_LITER_TO_GANA
#
# DRAVYA_PER_AYTAN_TO_GRAM_PER_CUBIC_CENTIMETER = GANA_TO_GRAM_PER_CUBIC_CENTIMETER
# GRAM_PER_CUBIC_CENTIMETER_PER_DRAVYA_PER_AYTAN = GRAM_PER_CUBIC_CENTIMETER_TO_GANA
#
# DRAVYA_PER_CUBIC_PADA_TO_GRAM_PER_CUBIC_CENTIMETER = GANA_TO_GRAM_PER_CUBIC_CENTIMETER
# GRAM_PER_CUBIC_CENTIMETER_TO_DRAVYA_PER_CUBIC_PADA = GRAM_PER_CUBIC_CENTIMETER_TO_GANA
#
# CHATIGANA_TO_GRAM_PER_CUBIC_CENTIMETER = Sezimal('1.432_503_322_004_012_430_004_144_222_124_425_414_134_433_312_244')
# GRAM_PER_CUBIC_CENTIMETER_TO_CHATIGANA = Sezimal('0.322_301_024_045_122_4')
# CHATIGANA_TO_GRAM_PER_CUBIC_CENTIMETER.reciprocal = GRAM_PER_CUBIC_CENTIMETER_TO_CHATIGANA
# GRAM_PER_CUBIC_CENTIMETER_TO_CHATIGANA.reciprocal = CHATIGANA_TO_GRAM_PER_CUBIC_CENTIMETER
#
# CHATIGANA_TO_GRAM_PER_MILLILITER = CHATIGANA_TO_GRAM_PER_CUBIC_CENTIMETER
# GRAM_PER_MILLILITER_TO_CHATIGANA = GRAM_PER_CUBIC_CENTIMETER_TO_CHATIGANA

#
# Force/Weight, Pressure, Energy/Work/Heat, Power
#

#
# Force / Weight
#
# Bara = dravya × pada × agrima⁻²
# Bara = dravya × tevara
#
BARA_TO_NEWTON = SezimalFraction('210_554_230_514_213_051 / 2_044_541_313_204_401_200')
NEWTON_TO_BARA = BARA_TO_NEWTON.reciprocal

#
# Energy/Work/Heat
#
# Karya = dravya × pada² × agrima⁻²
# Karya = bara × pada
# Karya = daba × aytan
#
# 1 J = 3.412 karya
# 1 karya = 1 ÷ 3.412 J
#
KARYA_TO_JOULE = SezimalFraction('23_433_452_533_505_041 / 24_224_034_443_110_000_344')
JOULE_TO_KARYA = KARYA_TO_JOULE.reciprocal

#
# Power
#
# Shati = dravya × pada² × agrima⁻³ = dravya × keshe × agrima⁻³
# Shati = karya × agrima⁻¹
# Shati = bara × pada × agrima⁻¹
# Shati = daba × pada³ × agrima⁻¹ = daba × aytan × agrima⁻¹
#
# 1 W = 10.505_252 sht
# 1 sht = 1 ÷ 10.505_252 W
#
SHATI_TO_WATT = SezimalFraction('23_433_452_533_505_041 / 502_150_541_130_054_411')
WATT_TO_SHATI = SHATI_TO_WATT.reciprocal

#
# Pressure
#
# Daba = dravya × pada⁻¹ × agrima⁻²
# Daba = bara × pada⁻² = bara × keshe⁻¹
# Daba = karya × pada⁻³ = karya × aytan⁻¹
#
DABA_TO_PASCAL = SezimalFraction('14_001_522_340_145_312_055_052 / 12_300_335_551_511_421_225')
PASCAL_TO_DABA = DABA_TO_PASCAL.reciprocal

#
# Electric Current
#
DARA_TO_AMPERE = Sezimal('0.312_350_123_501_235_012_350_123_501_235_012_350_123_501_235_013')
AMPERE_TO_DARA = Sezimal('1.504')
DARA_TO_AMPERE.reciprocal = AMPERE_TO_DARA
AMPERE_TO_DARA.reciprocal = DARA_TO_AMPERE

#
# Electric Charge
#
AVESHA_TO_COULOMB = Sezimal('1')
COULOMB_TO_AVESHA = Sezimal('1')
AVESHA_TO_COULOMB.reciprocal = COULOMB_TO_AVESHA
COULOMB_TO_AVESHA.reciprocal = AVESHA_TO_COULOMB

#
# Electric Potential Difference
#
VIBAVA_TO_VOLT = Sezimal('0.134_153_041_530_415_304_153_041_530_415_304_153_041_530_415_305')
VOLT_TO_VIBAVA = Sezimal('3.412')
VIBAVA_TO_VOLT.reciprocal = VOLT_TO_VIBAVA
VOLT_TO_VIBAVA.reciprocal = VIBAVA_TO_VOLT

#
# Electrical Resistance
#
PRATIRODA_TO_OHM = Sezimal('0.3')
OHM_TO_PRATIRODA = Sezimal('2')
PRATIRODA_TO_OHM.reciprocal = OHM_TO_PRATIRODA
OHM_TO_PRATIRODA.reciprocal = PRATIRODA_TO_OHM

#
# Electrical Conductance
#
CHALANA_TO_SIEMENS = Sezimal('2')
SIEMENS_TO_CHALANA = Sezimal('0.3')
CHALANA_TO_SIEMENS.reciprocal = SIEMENS_TO_CHALANA
SIEMENS_TO_CHALANA.reciprocal = CHALANA_TO_SIEMENS

#
# Electrical Inductance
#
PRERAKA_TO_HENRY = Sezimal('0.532')
HENRY_TO_PRERAKA = Sezimal('1.025_140_251_402_514_025_140_251_402_514_025_140_251_402_514_024')
PRERAKA_TO_HENRY.reciprocal = HENRY_TO_PRERAKA
HENRY_TO_PRERAKA.reciprocal = PRERAKA_TO_HENRY

#
# Electrical Capacitance
#
SAMAI_TO_FARAD = Sezimal('3.412')
FARAD_TO_SAMAI = Sezimal('0.134_153_041_530_415_304_153_041_530_415_304_153_041_530_415_305')
SAMAI_TO_FARAD.reciprocal = FARAD_TO_SAMAI
FARAD_TO_SAMAI.reciprocal = SAMAI_TO_FARAD

#
# Magnetic Flux
#
ABIVA_TO_WEBER = Sezimal('0.3')
WEBER_TO_ABIVA = Sezimal('2')
ABIVA_TO_WEBER.reciprocal = WEBER_TO_ABIVA
WEBER_TO_ABIVA.reciprocal = ABIVA_TO_WEBER

#
# Magnetic Flux Density
#
VISTARA_TO_TESLA = Sezimal('0.325_545_440_150_204_420_113_341_425_221_210_241_243_104_234_001')
TESLA_TO_VISTARA = Sezimal('1.414_212')
VISTARA_TO_TESLA.reciprocal = TESLA_TO_VISTARA
TESLA_TO_VISTARA.reciprocal = VISTARA_TO_TESLA

#
# Temperature
#

# #
# # This is for 100_dec °C == 212_dec °T
# #
# GATIKA_TO_KELVIN = SezimalFraction('41 / 12_500_000')
# KELVIN_TO_GATIKA = SezimalFraction('12_500_000 / 41')
# GATIKA_TO_KELVIN.reciprocal = KELVIN_TO_GATIKA
# KELVIN_TO_GATIKA.reciprocal = GATIKA_TO_KELVIN
#
# TAPA_TO_CELSIUS = SezimalFraction('41 / 125')
# CELSIUS_TO_TAPA = SezimalFraction('125 / 41')
# TAPA_TO_CELSIUS.reciprocal = CELSIUS_TO_TAPA
# CELSIUS_TO_TAPA.reciprocal = TAPA_TO_CELSIUS
#
# GATIKA_TAPA_SCALE_START = SezimalFraction('131_504_043_000 / 325')

#
# This is for 273.15_dec K == 240_100_404 gtk 4_486_900_dec gtk
# This gives water freezing a precise point on the scale,
# while also giving a nice convertion to Celsius about
# 2.040_143_01 ~ 2.112_462_dec
#
# Specific heat of water is tuned at
# 293.150_547_161_145 K
# 20.000_547_161_145 °C
#
GATIKA_TAPA_SCALE_START = Sezimal('240_100_404')

GATIKA_TO_KELVIN = SezimalFraction('41_143 / 12_523_221_412')
KELVIN_TO_GATIKA = GATIKA_TO_KELVIN.reciprocal

TAPA_TO_CELSIUS = SezimalFraction('132_523_430 / 320_113_505')
CELSIUS_TO_TAPA = TAPA_TO_CELSIUS.reciprocal


def gatika_to_tapa(gtk: str | int | float | Decimal | Sezimal | SezimalInteger | SezimalFraction = 1) -> Sezimal:
    if type(gtk) in (str, int, float, Decimal):
        gtk = Sezimal(gtk)

    return (gtk - GATIKA_TAPA_SCALE_START) / 100_000


def tapa_to_gatika(tap: str | int | float | Decimal | Sezimal | SezimalInteger | SezimalFraction = 1) -> Sezimal:
    if type(tap) in (str, int, float, Decimal):
        tap = Sezimal(tap)

    return (tap * 100_000) + GATIKA_TAPA_SCALE_START


def kelvin_to_celsius(kelvin: str | int | float | Decimal | Sezimal | SezimalInteger | SezimalFraction = 1) -> Sezimal:
    if type(kelvin) in (str, int, float, Decimal):
        kelvin = Sezimal(kelvin)

    gtk = kelvin * KELVIN_TO_GATIKA
    tap = gatika_to_tapa(gtk)

    return tap * TAPA_TO_CELSIUS


def celsius_to_kelvin(celsius: str | int | float | Decimal | Sezimal | SezimalInteger | SezimalFraction = 1) -> Sezimal:
    if type(celsius) in (str, int, float, Decimal):
        celsius = Sezimal(celsius)

    tap = celsius * CELSIUS_TO_TAPA
    gtk = tapa_to_gatika(tap)

    return gtk * GATIKA_TO_KELVIN


#
# Currency
#
MANI_TO_MISALI = Sezimal('0.000_000_01')
MISALI_TO_MANI = Sezimal('100_000_000')
MANI_TO_MISALI.reciprocal = MISALI_TO_MANI
MISALI_TO_MANI.reciprocal = MANI_TO_MISALI

MANI_TO_SATOSHI = Sezimal('1')
SATOSHI_TO_MANI = Sezimal('1')
MANI_TO_SATOSHI.reciprocal = SATOSHI_TO_MANI
SATOSHI_TO_MANI.reciprocal = MANI_TO_SATOSHI

MISALI_TO_SATOSHI = Sezimal('100_000_000')
SATOSHI_TO_MISALI = Sezimal('0.000_000_01')
MISALI_TO_SATOSHI.reciprocal = SATOSHI_TO_MISALI
SATOSHI_TO_MISALI.reciprocal = MISALI_TO_SATOSHI

MANI_TO_BITCOIN = SezimalFraction('1 / 13_531_202_544')
BITCOIN_TO_MANI = SezimalFraction('13_531_202_544 / 1')
MANI_TO_BITCOIN.reciprocal = BITCOIN_TO_MANI
BITCOIN_TO_MANI.reciprocal = MANI_TO_BITCOIN

MISALI_TO_BITCOIN = SezimalFraction('100_000_000 / 13_531_202_544')
BITCOIN_TO_MISALI = SezimalFraction('13_531_202_544 / 100_000_000')
MISALI_TO_BITCOIN.reciprocal = BITCOIN_TO_MISALI
BITCOIN_TO_MISALI.reciprocal = MISALI_TO_BITCOIN

BITCOIN_TO_SATOSHI = BITCOIN_TO_MANI
SATOSHI_TO_BITCOIN = MANI_TO_BITCOIN
BITCOIN_TO_SATOSHI.reciprocal = SATOSHI_TO_BITCOIN
SATOSHI_TO_BITCOIN.reciprocal = BITCOIN_TO_SATOSHI

#
# Proportions
#
PERNIFF_TO_PERCENTAGE = SezimalFraction('244 / 100')
PERCENTAGE_TO_PERNIFF = SezimalFraction('100 / 244')
PERNIFF_TO_PERCENTAGE.reciprocal = PERCENTAGE_TO_PERNIFF
PERCENTAGE_TO_PERNIFF.reciprocal = PERNIFF_TO_PERCENTAGE

PERSIXNIFF_TO_PERCENTAGE = SezimalFraction('244 / 1_000')
PERCENTAGE_TO_PERSIXNIFF = SezimalFraction('1_000 / 244')
PERSIXNIFF_TO_PERCENTAGE.reciprocal = PERCENTAGE_TO_PERSIXNIFF
PERCENTAGE_TO_PERSIXNIFF.reciprocal = PERSIXNIFF_TO_PERCENTAGE

PERUNEXIAN_TO_PERCENTAGE = SezimalFraction('244 / 10_000')
PERCENTAGE_TO_PERUNEXIAN = SezimalFraction('10_000 / 244')
PERUNEXIAN_TO_PERCENTAGE.reciprocal = PERCENTAGE_TO_PERUNEXIAN
PERCENTAGE_TO_PERUNEXIAN.reciprocal = PERUNEXIAN_TO_PERCENTAGE

PERNIFF_TO_PERMILLE = SezimalFraction('4_344 / 100')
PERMILLE_TO_PERNIFF = SezimalFraction('100 / 4_344')
PERNIFF_TO_PERMILLE.reciprocal = PERMILLE_TO_PERNIFF
PERMILLE_TO_PERNIFF.reciprocal = PERNIFF_TO_PERMILLE

PERSIXNIFF_TO_PERMILLE = SezimalFraction('4_344 / 1_000')
PERMILLE_TO_PERSIXNIFF = SezimalFraction('1_000 / 4_344')
PERSIXNIFF_TO_PERMILLE.reciprocal = PERMILLE_TO_PERSIXNIFF
PERMILLE_TO_PERSIXNIFF.reciprocal = PERSIXNIFF_TO_PERMILLE

PERUNEXIAN_TO_PERMILLE = SezimalFraction('4_344 / 10_000')
PERMILLE_TO_PERUNEXIAN = SezimalFraction('10_000 / 4_344')
PERUNEXIAN_TO_PERMILLE.reciprocal = PERMILLE_TO_PERUNEXIAN
PERMILLE_TO_PERUNEXIAN.reciprocal = PERUNEXIAN_TO_PERMILLE


# AVOGADRO_CONSTANT = SezimalFraction('2_420_220_441_202_515_135_044_212_141_344 / 1')
# MATRA_TO_UNIT = SezimalFraction('135_532_345_125_343_252_004_520_102_135_504 / 1')
# UNIT_TO_MATRA = SezimalFraction('1 / 135_532_345_125_343_252_004_520_102_135_504')
# MATRA_TO_MOL = SezimalFraction('135_532_345_125_343_252_004_520_102_135_504 / 2_420_220_441_202_515_135_044_212_141_344')
# MOL_TO_MATRA = SezimalFraction('2_420_220_441_202_515_135_044_212_141_344 / 135_532_345_125_343_252_004_520_102_135_504')

# BOLTZMAN_CONSTANT = SezimalFraction('11_250_420_111_444_544_203_422_420_355_152_044_442_153_345_055_302_250_340_300_014_420_411_214_343 / 200_405_230_432_440_421_132_122_504_311_341_330_531_322_055_253_203_002_103_000_144_000_000_000_000_000_000_000_000_000_000')
# SPEED_OF_LIGHT = SezimalFraction('134_535_421_043 / 1')
# SPEED_OF_LIGHT_RECIPROCAL = SezimalFraction('1 / 134_535_421_043')
# VACUUM_GRAVITY = SezimalFraction('5_415_552 / 4_332_142_412_144') * PI
